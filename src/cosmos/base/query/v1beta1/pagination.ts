// Code generated by protoc-gen-as. DO NOT EDIT.
// versions:
// 	 protoc-gen-as v0.3.0-alpha.2
// 	 protoc        v3.20.1
// source: cosmos/base/query/v1beta1/pagination.ts

import { Writer, Reader, Protobuf } from "as-proto";

export class PageRequest {
  static encode(message: PageRequest, writer: Writer): void {
    writer.uint32(10);
    writer.bytes(message.key);

    writer.uint32(16);
    writer.uint64(message.offset);

    writer.uint32(24);
    writer.uint64(message.limit);

    writer.uint32(32);
    writer.bool(message.count_total);

    writer.uint32(40);
    writer.bool(message.reverse);
  }

  static decode(reader: Reader, length: i32): PageRequest {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new PageRequest();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.key = reader.bytes();
          break;

        case 2:
          message.offset = reader.uint64();
          break;

        case 3:
          message.limit = reader.uint64();
          break;

        case 4:
          message.count_total = reader.bool();
          break;

        case 5:
          message.reverse = reader.bool();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  key: Uint8Array;
  offset: u64;
  limit: u64;
  count_total: bool;
  reverse: bool;

  constructor(
    key: Uint8Array = new Uint8Array(0),
    offset: u64 = 0,
    limit: u64 = 0,
    count_total: bool = false,
    reverse: bool = false
  ) {
    this.key = key;
    this.offset = offset;
    this.limit = limit;
    this.count_total = count_total;
    this.reverse = reverse;
  }
}

export function decodePageRequest(a: Uint8Array): PageRequest {
  return Protobuf.decode<PageRequest>(a, PageRequest.decode);
}

export class PageResponse {
  static encode(message: PageResponse, writer: Writer): void {
    writer.uint32(10);
    writer.bytes(message.next_key);

    writer.uint32(16);
    writer.uint64(message.total);
  }

  static decode(reader: Reader, length: i32): PageResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new PageResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.next_key = reader.bytes();
          break;

        case 2:
          message.total = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  next_key: Uint8Array;
  total: u64;

  constructor(next_key: Uint8Array = new Uint8Array(0), total: u64 = 0) {
    this.next_key = next_key;
    this.total = total;
  }
}

export function decodePageResponse(a: Uint8Array): PageResponse {
  return Protobuf.decode<PageResponse>(a, PageResponse.decode);
}
