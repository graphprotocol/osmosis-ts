// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v0.4.0
//   protoc        v3.21.6

import { Writer, Reader, Protobuf } from "as-proto";
import { google } from "../../google";
import { cosmos } from "../../cosmos";
import { PeriodLock } from "./lock";

export class MsgLockTokens {
  static encode(message: MsgLockTokens, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.owner);

    const duration = message.duration;
    if (duration !== null) {
      writer.uint32(18);
      writer.fork();
      google.protobuf.Duration.encode(duration, writer);
      writer.ldelim();
    }

    const coins = message.coins;
    for (let i = 0; i < coins.length; ++i) {
      writer.uint32(26);
      writer.fork();
      cosmos.base.v1beta1.Coin.encode(coins[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): MsgLockTokens {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgLockTokens();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.owner = reader.string();
          break;

        case 2:
          message.duration = google.protobuf.Duration.decode(
            reader,
            reader.uint32()
          );
          break;

        case 3:
          message.coins.push(
            cosmos.base.v1beta1.Coin.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  owner: string;
  duration: google.protobuf.Duration | null;
  coins: Array<cosmos.base.v1beta1.Coin>;

  constructor(
    owner: string = "",
    duration: google.protobuf.Duration | null = null,
    coins: Array<cosmos.base.v1beta1.Coin> = []
  ) {
    this.owner = owner;
    this.duration = duration;
    this.coins = coins;
  }
}

export function encodeMsgLockTokens(message: MsgLockTokens): Uint8Array {
  return Protobuf.encode(message, MsgLockTokens.encode);
}

export function decodeMsgLockTokens(buffer: Uint8Array): MsgLockTokens {
  return Protobuf.decode<MsgLockTokens>(buffer, MsgLockTokens.decode);
}

@unmanaged
export class MsgLockTokensResponse {
  static encode(message: MsgLockTokensResponse, writer: Writer): void {
    writer.uint32(8);
    writer.uint64(message.iD);
  }

  static decode(reader: Reader, length: i32): MsgLockTokensResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgLockTokensResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.iD = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  iD: u64;

  constructor(iD: u64 = 0) {
    this.iD = iD;
  }
}

export function encodeMsgLockTokensResponse(
  message: MsgLockTokensResponse
): Uint8Array {
  return Protobuf.encode(message, MsgLockTokensResponse.encode);
}

export function decodeMsgLockTokensResponse(
  buffer: Uint8Array
): MsgLockTokensResponse {
  return Protobuf.decode<MsgLockTokensResponse>(
    buffer,
    MsgLockTokensResponse.decode
  );
}

export class MsgBeginUnlockingAll {
  static encode(message: MsgBeginUnlockingAll, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.owner);
  }

  static decode(reader: Reader, length: i32): MsgBeginUnlockingAll {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgBeginUnlockingAll();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.owner = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  owner: string;

  constructor(owner: string = "") {
    this.owner = owner;
  }
}

export function encodeMsgBeginUnlockingAll(
  message: MsgBeginUnlockingAll
): Uint8Array {
  return Protobuf.encode(message, MsgBeginUnlockingAll.encode);
}

export function decodeMsgBeginUnlockingAll(
  buffer: Uint8Array
): MsgBeginUnlockingAll {
  return Protobuf.decode<MsgBeginUnlockingAll>(
    buffer,
    MsgBeginUnlockingAll.decode
  );
}

export class MsgBeginUnlockingAllResponse {
  static encode(message: MsgBeginUnlockingAllResponse, writer: Writer): void {
    const unlocks = message.unlocks;
    for (let i = 0; i < unlocks.length; ++i) {
      writer.uint32(10);
      writer.fork();
      PeriodLock.encode(unlocks[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): MsgBeginUnlockingAllResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgBeginUnlockingAllResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.unlocks.push(PeriodLock.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  unlocks: Array<PeriodLock>;

  constructor(unlocks: Array<PeriodLock> = []) {
    this.unlocks = unlocks;
  }
}

export function encodeMsgBeginUnlockingAllResponse(
  message: MsgBeginUnlockingAllResponse
): Uint8Array {
  return Protobuf.encode(message, MsgBeginUnlockingAllResponse.encode);
}

export function decodeMsgBeginUnlockingAllResponse(
  buffer: Uint8Array
): MsgBeginUnlockingAllResponse {
  return Protobuf.decode<MsgBeginUnlockingAllResponse>(
    buffer,
    MsgBeginUnlockingAllResponse.decode
  );
}

export class MsgBeginUnlocking {
  static encode(message: MsgBeginUnlocking, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.owner);

    writer.uint32(16);
    writer.uint64(message.iD);

    const coins = message.coins;
    for (let i = 0; i < coins.length; ++i) {
      writer.uint32(26);
      writer.fork();
      cosmos.base.v1beta1.Coin.encode(coins[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): MsgBeginUnlocking {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgBeginUnlocking();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.owner = reader.string();
          break;

        case 2:
          message.iD = reader.uint64();
          break;

        case 3:
          message.coins.push(
            cosmos.base.v1beta1.Coin.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  owner: string;
  iD: u64;
  coins: Array<cosmos.base.v1beta1.Coin>;

  constructor(
    owner: string = "",
    iD: u64 = 0,
    coins: Array<cosmos.base.v1beta1.Coin> = []
  ) {
    this.owner = owner;
    this.iD = iD;
    this.coins = coins;
  }
}

export function encodeMsgBeginUnlocking(
  message: MsgBeginUnlocking
): Uint8Array {
  return Protobuf.encode(message, MsgBeginUnlocking.encode);
}

export function decodeMsgBeginUnlocking(buffer: Uint8Array): MsgBeginUnlocking {
  return Protobuf.decode<MsgBeginUnlocking>(buffer, MsgBeginUnlocking.decode);
}

@unmanaged
export class MsgBeginUnlockingResponse {
  static encode(message: MsgBeginUnlockingResponse, writer: Writer): void {
    writer.uint32(8);
    writer.bool(message.success);
  }

  static decode(reader: Reader, length: i32): MsgBeginUnlockingResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgBeginUnlockingResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.success = reader.bool();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  success: bool;

  constructor(success: bool = false) {
    this.success = success;
  }
}

export function encodeMsgBeginUnlockingResponse(
  message: MsgBeginUnlockingResponse
): Uint8Array {
  return Protobuf.encode(message, MsgBeginUnlockingResponse.encode);
}

export function decodeMsgBeginUnlockingResponse(
  buffer: Uint8Array
): MsgBeginUnlockingResponse {
  return Protobuf.decode<MsgBeginUnlockingResponse>(
    buffer,
    MsgBeginUnlockingResponse.decode
  );
}
