// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v0.4.0
//   protoc        v3.21.6

import { Writer, Reader, Protobuf } from "as-proto";
import { google } from "../../google";
import { cosmos } from "../../cosmos";

export class PeriodLock {
  static encode(message: PeriodLock, writer: Writer): void {
    writer.uint32(8);
    writer.uint64(message.iD);

    writer.uint32(18);
    writer.string(message.owner);

    const duration = message.duration;
    if (duration !== null) {
      writer.uint32(26);
      writer.fork();
      google.protobuf.Duration.encode(duration, writer);
      writer.ldelim();
    }

    const endTime = message.endTime;
    if (endTime !== null) {
      writer.uint32(34);
      writer.fork();
      google.protobuf.Timestamp.encode(endTime, writer);
      writer.ldelim();
    }

    const coins = message.coins;
    for (let i = 0; i < coins.length; ++i) {
      writer.uint32(42);
      writer.fork();
      cosmos.base.v1beta1.Coin.encode(coins[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): PeriodLock {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new PeriodLock();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.iD = reader.uint64();
          break;

        case 2:
          message.owner = reader.string();
          break;

        case 3:
          message.duration = google.protobuf.Duration.decode(
            reader,
            reader.uint32()
          );
          break;

        case 4:
          message.endTime = google.protobuf.Timestamp.decode(
            reader,
            reader.uint32()
          );
          break;

        case 5:
          message.coins.push(
            cosmos.base.v1beta1.Coin.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  iD: u64;
  owner: string;
  duration: google.protobuf.Duration | null;
  endTime: google.protobuf.Timestamp | null;
  coins: Array<cosmos.base.v1beta1.Coin>;

  constructor(
    iD: u64 = 0,
    owner: string = "",
    duration: google.protobuf.Duration | null = null,
    endTime: google.protobuf.Timestamp | null = null,
    coins: Array<cosmos.base.v1beta1.Coin> = []
  ) {
    this.iD = iD;
    this.owner = owner;
    this.duration = duration;
    this.endTime = endTime;
    this.coins = coins;
  }
}

export function encodePeriodLock(message: PeriodLock): Uint8Array {
  return Protobuf.encode(message, PeriodLock.encode);
}

export function decodePeriodLock(buffer: Uint8Array): PeriodLock {
  return Protobuf.decode<PeriodLock>(buffer, PeriodLock.decode);
}

export class QueryCondition {
  static encode(message: QueryCondition, writer: Writer): void {
    writer.uint32(8);
    writer.int32(message.lockQueryType);

    writer.uint32(18);
    writer.string(message.denom);

    const duration = message.duration;
    if (duration !== null) {
      writer.uint32(26);
      writer.fork();
      google.protobuf.Duration.encode(duration, writer);
      writer.ldelim();
    }

    const timestamp = message.timestamp;
    if (timestamp !== null) {
      writer.uint32(34);
      writer.fork();
      google.protobuf.Timestamp.encode(timestamp, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): QueryCondition {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new QueryCondition();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.lockQueryType = reader.int32();
          break;

        case 2:
          message.denom = reader.string();
          break;

        case 3:
          message.duration = google.protobuf.Duration.decode(
            reader,
            reader.uint32()
          );
          break;

        case 4:
          message.timestamp = google.protobuf.Timestamp.decode(
            reader,
            reader.uint32()
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  lockQueryType: LockQueryType;
  denom: string;
  duration: google.protobuf.Duration | null;
  timestamp: google.protobuf.Timestamp | null;

  constructor(
    lockQueryType: LockQueryType = 0,
    denom: string = "",
    duration: google.protobuf.Duration | null = null,
    timestamp: google.protobuf.Timestamp | null = null
  ) {
    this.lockQueryType = lockQueryType;
    this.denom = denom;
    this.duration = duration;
    this.timestamp = timestamp;
  }
}

export function encodeQueryCondition(message: QueryCondition): Uint8Array {
  return Protobuf.encode(message, QueryCondition.encode);
}

export function decodeQueryCondition(buffer: Uint8Array): QueryCondition {
  return Protobuf.decode<QueryCondition>(buffer, QueryCondition.decode);
}

export class SyntheticLock {
  static encode(message: SyntheticLock, writer: Writer): void {
    writer.uint32(8);
    writer.uint64(message.underlyingLockId);

    writer.uint32(18);
    writer.string(message.synthDenom);

    const endTime = message.endTime;
    if (endTime !== null) {
      writer.uint32(26);
      writer.fork();
      google.protobuf.Timestamp.encode(endTime, writer);
      writer.ldelim();
    }

    const duration = message.duration;
    if (duration !== null) {
      writer.uint32(34);
      writer.fork();
      google.protobuf.Duration.encode(duration, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): SyntheticLock {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new SyntheticLock();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.underlyingLockId = reader.uint64();
          break;

        case 2:
          message.synthDenom = reader.string();
          break;

        case 3:
          message.endTime = google.protobuf.Timestamp.decode(
            reader,
            reader.uint32()
          );
          break;

        case 4:
          message.duration = google.protobuf.Duration.decode(
            reader,
            reader.uint32()
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  underlyingLockId: u64;
  synthDenom: string;
  endTime: google.protobuf.Timestamp | null;
  duration: google.protobuf.Duration | null;

  constructor(
    underlyingLockId: u64 = 0,
    synthDenom: string = "",
    endTime: google.protobuf.Timestamp | null = null,
    duration: google.protobuf.Duration | null = null
  ) {
    this.underlyingLockId = underlyingLockId;
    this.synthDenom = synthDenom;
    this.endTime = endTime;
    this.duration = duration;
  }
}

export function encodeSyntheticLock(message: SyntheticLock): Uint8Array {
  return Protobuf.encode(message, SyntheticLock.encode);
}

export function decodeSyntheticLock(buffer: Uint8Array): SyntheticLock {
  return Protobuf.decode<SyntheticLock>(buffer, SyntheticLock.decode);
}

export enum LockQueryType {
  ByDuration = 0,
  ByTime = 1,
}
