// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v0.4.0
//   protoc        v3.21.6

import { Writer, Reader, Protobuf } from "as-proto";
import { lockup } from "../lockup";
import { cosmos } from "../../cosmos";
import { google } from "../../google";

export class MsgCreateGauge {
  static encode(message: MsgCreateGauge, writer: Writer): void {
    writer.uint32(8);
    writer.bool(message.isPerpetual);

    writer.uint32(18);
    writer.string(message.owner);

    const distributeTo = message.distributeTo;
    if (distributeTo !== null) {
      writer.uint32(26);
      writer.fork();
      lockup.QueryCondition.encode(distributeTo, writer);
      writer.ldelim();
    }

    const coins = message.coins;
    for (let i = 0; i < coins.length; ++i) {
      writer.uint32(34);
      writer.fork();
      cosmos.base.v1beta1.Coin.encode(coins[i], writer);
      writer.ldelim();
    }

    const startTime = message.startTime;
    if (startTime !== null) {
      writer.uint32(42);
      writer.fork();
      google.protobuf.Timestamp.encode(startTime, writer);
      writer.ldelim();
    }

    writer.uint32(48);
    writer.uint64(message.numEpochsPaidOver);
  }

  static decode(reader: Reader, length: i32): MsgCreateGauge {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgCreateGauge();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.isPerpetual = reader.bool();
          break;

        case 2:
          message.owner = reader.string();
          break;

        case 3:
          message.distributeTo = lockup.QueryCondition.decode(
            reader,
            reader.uint32()
          );
          break;

        case 4:
          message.coins.push(
            cosmos.base.v1beta1.Coin.decode(reader, reader.uint32())
          );
          break;

        case 5:
          message.startTime = google.protobuf.Timestamp.decode(
            reader,
            reader.uint32()
          );
          break;

        case 6:
          message.numEpochsPaidOver = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  isPerpetual: bool;
  owner: string;
  distributeTo: lockup.QueryCondition | null;
  coins: Array<cosmos.base.v1beta1.Coin>;
  startTime: google.protobuf.Timestamp | null;
  numEpochsPaidOver: u64;

  constructor(
    isPerpetual: bool = false,
    owner: string = "",
    distributeTo: lockup.QueryCondition | null = null,
    coins: Array<cosmos.base.v1beta1.Coin> = [],
    startTime: google.protobuf.Timestamp | null = null,
    numEpochsPaidOver: u64 = 0
  ) {
    this.isPerpetual = isPerpetual;
    this.owner = owner;
    this.distributeTo = distributeTo;
    this.coins = coins;
    this.startTime = startTime;
    this.numEpochsPaidOver = numEpochsPaidOver;
  }
}

export function encodeMsgCreateGauge(message: MsgCreateGauge): Uint8Array {
  return Protobuf.encode(message, MsgCreateGauge.encode);
}

export function decodeMsgCreateGauge(buffer: Uint8Array): MsgCreateGauge {
  return Protobuf.decode<MsgCreateGauge>(buffer, MsgCreateGauge.decode);
}

@unmanaged
export class MsgCreateGaugeResponse {
  static encode(message: MsgCreateGaugeResponse, writer: Writer): void {}

  static decode(reader: Reader, length: i32): MsgCreateGaugeResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgCreateGaugeResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  constructor() {}
}

export function encodeMsgCreateGaugeResponse(
  message: MsgCreateGaugeResponse
): Uint8Array {
  return Protobuf.encode(message, MsgCreateGaugeResponse.encode);
}

export function decodeMsgCreateGaugeResponse(
  buffer: Uint8Array
): MsgCreateGaugeResponse {
  return Protobuf.decode<MsgCreateGaugeResponse>(
    buffer,
    MsgCreateGaugeResponse.decode
  );
}

export class MsgAddToGauge {
  static encode(message: MsgAddToGauge, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.owner);

    writer.uint32(16);
    writer.uint64(message.gaugeId);

    const rewards = message.rewards;
    for (let i = 0; i < rewards.length; ++i) {
      writer.uint32(26);
      writer.fork();
      cosmos.base.v1beta1.Coin.encode(rewards[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): MsgAddToGauge {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgAddToGauge();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.owner = reader.string();
          break;

        case 2:
          message.gaugeId = reader.uint64();
          break;

        case 3:
          message.rewards.push(
            cosmos.base.v1beta1.Coin.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  owner: string;
  gaugeId: u64;
  rewards: Array<cosmos.base.v1beta1.Coin>;

  constructor(
    owner: string = "",
    gaugeId: u64 = 0,
    rewards: Array<cosmos.base.v1beta1.Coin> = []
  ) {
    this.owner = owner;
    this.gaugeId = gaugeId;
    this.rewards = rewards;
  }
}

export function encodeMsgAddToGauge(message: MsgAddToGauge): Uint8Array {
  return Protobuf.encode(message, MsgAddToGauge.encode);
}

export function decodeMsgAddToGauge(buffer: Uint8Array): MsgAddToGauge {
  return Protobuf.decode<MsgAddToGauge>(buffer, MsgAddToGauge.decode);
}

@unmanaged
export class MsgAddToGaugeResponse {
  static encode(message: MsgAddToGaugeResponse, writer: Writer): void {}

  static decode(reader: Reader, length: i32): MsgAddToGaugeResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgAddToGaugeResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  constructor() {}
}

export function encodeMsgAddToGaugeResponse(
  message: MsgAddToGaugeResponse
): Uint8Array {
  return Protobuf.encode(message, MsgAddToGaugeResponse.encode);
}

export function decodeMsgAddToGaugeResponse(
  buffer: Uint8Array
): MsgAddToGaugeResponse {
  return Protobuf.decode<MsgAddToGaugeResponse>(
    buffer,
    MsgAddToGaugeResponse.decode
  );
}
