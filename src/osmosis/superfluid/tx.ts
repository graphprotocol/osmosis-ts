// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v0.4.0
//   protoc        v3.21.6

import { Writer, Reader, Protobuf } from "as-proto";
import { cosmos } from "../../cosmos";

export class MsgSuperfluidDelegate {
  static encode(message: MsgSuperfluidDelegate, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.sender);

    writer.uint32(16);
    writer.uint64(message.lockId);

    writer.uint32(26);
    writer.string(message.valAddr);
  }

  static decode(reader: Reader, length: i32): MsgSuperfluidDelegate {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgSuperfluidDelegate();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;

        case 2:
          message.lockId = reader.uint64();
          break;

        case 3:
          message.valAddr = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  sender: string;
  lockId: u64;
  valAddr: string;

  constructor(sender: string = "", lockId: u64 = 0, valAddr: string = "") {
    this.sender = sender;
    this.lockId = lockId;
    this.valAddr = valAddr;
  }
}

export function encodeMsgSuperfluidDelegate(
  message: MsgSuperfluidDelegate
): Uint8Array {
  return Protobuf.encode(message, MsgSuperfluidDelegate.encode);
}

export function decodeMsgSuperfluidDelegate(
  buffer: Uint8Array
): MsgSuperfluidDelegate {
  return Protobuf.decode<MsgSuperfluidDelegate>(
    buffer,
    MsgSuperfluidDelegate.decode
  );
}

@unmanaged
export class MsgSuperfluidDelegateResponse {
  static encode(message: MsgSuperfluidDelegateResponse, writer: Writer): void {}

  static decode(reader: Reader, length: i32): MsgSuperfluidDelegateResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgSuperfluidDelegateResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  constructor() {}
}

export function encodeMsgSuperfluidDelegateResponse(
  message: MsgSuperfluidDelegateResponse
): Uint8Array {
  return Protobuf.encode(message, MsgSuperfluidDelegateResponse.encode);
}

export function decodeMsgSuperfluidDelegateResponse(
  buffer: Uint8Array
): MsgSuperfluidDelegateResponse {
  return Protobuf.decode<MsgSuperfluidDelegateResponse>(
    buffer,
    MsgSuperfluidDelegateResponse.decode
  );
}

export class MsgSuperfluidUndelegate {
  static encode(message: MsgSuperfluidUndelegate, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.sender);

    writer.uint32(16);
    writer.uint64(message.lockId);
  }

  static decode(reader: Reader, length: i32): MsgSuperfluidUndelegate {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgSuperfluidUndelegate();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;

        case 2:
          message.lockId = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  sender: string;
  lockId: u64;

  constructor(sender: string = "", lockId: u64 = 0) {
    this.sender = sender;
    this.lockId = lockId;
  }
}

export function encodeMsgSuperfluidUndelegate(
  message: MsgSuperfluidUndelegate
): Uint8Array {
  return Protobuf.encode(message, MsgSuperfluidUndelegate.encode);
}

export function decodeMsgSuperfluidUndelegate(
  buffer: Uint8Array
): MsgSuperfluidUndelegate {
  return Protobuf.decode<MsgSuperfluidUndelegate>(
    buffer,
    MsgSuperfluidUndelegate.decode
  );
}

@unmanaged
export class MsgSuperfluidUndelegateResponse {
  static encode(
    message: MsgSuperfluidUndelegateResponse,
    writer: Writer
  ): void {}

  static decode(reader: Reader, length: i32): MsgSuperfluidUndelegateResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgSuperfluidUndelegateResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  constructor() {}
}

export function encodeMsgSuperfluidUndelegateResponse(
  message: MsgSuperfluidUndelegateResponse
): Uint8Array {
  return Protobuf.encode(message, MsgSuperfluidUndelegateResponse.encode);
}

export function decodeMsgSuperfluidUndelegateResponse(
  buffer: Uint8Array
): MsgSuperfluidUndelegateResponse {
  return Protobuf.decode<MsgSuperfluidUndelegateResponse>(
    buffer,
    MsgSuperfluidUndelegateResponse.decode
  );
}

export class MsgSuperfluidUnbondLock {
  static encode(message: MsgSuperfluidUnbondLock, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.sender);

    writer.uint32(16);
    writer.uint64(message.lockId);
  }

  static decode(reader: Reader, length: i32): MsgSuperfluidUnbondLock {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgSuperfluidUnbondLock();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;

        case 2:
          message.lockId = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  sender: string;
  lockId: u64;

  constructor(sender: string = "", lockId: u64 = 0) {
    this.sender = sender;
    this.lockId = lockId;
  }
}

export function encodeMsgSuperfluidUnbondLock(
  message: MsgSuperfluidUnbondLock
): Uint8Array {
  return Protobuf.encode(message, MsgSuperfluidUnbondLock.encode);
}

export function decodeMsgSuperfluidUnbondLock(
  buffer: Uint8Array
): MsgSuperfluidUnbondLock {
  return Protobuf.decode<MsgSuperfluidUnbondLock>(
    buffer,
    MsgSuperfluidUnbondLock.decode
  );
}

@unmanaged
export class MsgSuperfluidUnbondLockResponse {
  static encode(
    message: MsgSuperfluidUnbondLockResponse,
    writer: Writer
  ): void {}

  static decode(reader: Reader, length: i32): MsgSuperfluidUnbondLockResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgSuperfluidUnbondLockResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  constructor() {}
}

export function encodeMsgSuperfluidUnbondLockResponse(
  message: MsgSuperfluidUnbondLockResponse
): Uint8Array {
  return Protobuf.encode(message, MsgSuperfluidUnbondLockResponse.encode);
}

export function decodeMsgSuperfluidUnbondLockResponse(
  buffer: Uint8Array
): MsgSuperfluidUnbondLockResponse {
  return Protobuf.decode<MsgSuperfluidUnbondLockResponse>(
    buffer,
    MsgSuperfluidUnbondLockResponse.decode
  );
}

export class MsgLockAndSuperfluidDelegate {
  static encode(message: MsgLockAndSuperfluidDelegate, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.sender);

    const coins = message.coins;
    for (let i = 0; i < coins.length; ++i) {
      writer.uint32(18);
      writer.fork();
      cosmos.base.v1beta1.Coin.encode(coins[i], writer);
      writer.ldelim();
    }

    writer.uint32(26);
    writer.string(message.valAddr);
  }

  static decode(reader: Reader, length: i32): MsgLockAndSuperfluidDelegate {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgLockAndSuperfluidDelegate();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;

        case 2:
          message.coins.push(
            cosmos.base.v1beta1.Coin.decode(reader, reader.uint32())
          );
          break;

        case 3:
          message.valAddr = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  sender: string;
  coins: Array<cosmos.base.v1beta1.Coin>;
  valAddr: string;

  constructor(
    sender: string = "",
    coins: Array<cosmos.base.v1beta1.Coin> = [],
    valAddr: string = ""
  ) {
    this.sender = sender;
    this.coins = coins;
    this.valAddr = valAddr;
  }
}

export function encodeMsgLockAndSuperfluidDelegate(
  message: MsgLockAndSuperfluidDelegate
): Uint8Array {
  return Protobuf.encode(message, MsgLockAndSuperfluidDelegate.encode);
}

export function decodeMsgLockAndSuperfluidDelegate(
  buffer: Uint8Array
): MsgLockAndSuperfluidDelegate {
  return Protobuf.decode<MsgLockAndSuperfluidDelegate>(
    buffer,
    MsgLockAndSuperfluidDelegate.decode
  );
}

@unmanaged
export class MsgLockAndSuperfluidDelegateResponse {
  static encode(
    message: MsgLockAndSuperfluidDelegateResponse,
    writer: Writer
  ): void {
    writer.uint32(8);
    writer.uint64(message.iD);
  }

  static decode(
    reader: Reader,
    length: i32
  ): MsgLockAndSuperfluidDelegateResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgLockAndSuperfluidDelegateResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.iD = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  iD: u64;

  constructor(iD: u64 = 0) {
    this.iD = iD;
  }
}

export function encodeMsgLockAndSuperfluidDelegateResponse(
  message: MsgLockAndSuperfluidDelegateResponse
): Uint8Array {
  return Protobuf.encode(message, MsgLockAndSuperfluidDelegateResponse.encode);
}

export function decodeMsgLockAndSuperfluidDelegateResponse(
  buffer: Uint8Array
): MsgLockAndSuperfluidDelegateResponse {
  return Protobuf.decode<MsgLockAndSuperfluidDelegateResponse>(
    buffer,
    MsgLockAndSuperfluidDelegateResponse.decode
  );
}
